Please provide a complete Discord bot cog in Python with the following requirements. The cog should contain a Discord bot command with maximum UI functionality (dropdowns, buttons, etc.) and proper handling of interactions. The cog should be designed for practical use, focusing on user interaction through buttons, dropdowns, and message responses. Include proper metadata, detailed help, and command structure.

The cog should include:

Metadata for the command (name, category, help).
Button interaction handling, dropdown menus, and callback functions for user interaction.
Proper error handling and messages for user feedback.
A help command that explains how the command works and its usage.
The cog must be designed in a practical and clear way for easy integration into the bot.
The code should follow the structure of a cog, with no extra comments or explanations—just pure code.
Here’s the cog structure:

python
Copy code
# command_name.py
import discord
from discord.ui import Select, Button, View
from discord.ext import commands

metadata = {
    "name": "Command Name",
    "category": "Category",
    "help": "Detailed description of what the command does."
}

class CommandNameCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def execute_command(self, interaction):
        # Command logic goes here
        pass

    @commands.command()
    async def help_command(self, interaction):
        help_message = f"**{metadata['name']}**\n\n{metadata['help']}"
        await interaction.response.send_message(help_message)

async def setup(bot):
    await bot.add_cog(CommandNameCog(bot))
Here’s the ideal example for a command (such as AssignRoleCog):

python
Copy code
import discord
from discord.ui import Select, Button, View
from discord.ext import commands

metadata = {
    "name": "Assign Role",
    "category": "Moderation",
    "help": "This command allows users to assign roles to multiple people from a dropdown menu."
}

class AssignRoleCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def execute_command(self, interaction):
        roles = interaction.guild.roles
        role_options = [
            discord.SelectOption(label=role.name, value=str(role.id)) 
            for role in roles if not role.managed and role.name != "@everyone"
        ]
        
        if not role_options:
            await interaction.response.send_message("No roles available to assign.", ephemeral=True)
            return
        
        role_select = Select(
            placeholder="Select a role to assign",
            options=role_options
        )
        
        async def select_role_callback(select_interaction):
            selected_role_id = select_interaction.data['values'][0]
            selected_role = interaction.guild.get_role(int(selected_role_id))

            if not selected_role:
                await select_interaction.response.send_message("Role not found.", ephemeral=True)
                return

            await select_interaction.response.send_message("Please mention the users you want to assign the role to.", ephemeral=True)
            
            def check(msg):
                return msg.author == interaction.user and msg.channel == interaction.channel

            try:
                msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
                tagged_users = [user for user in msg.mentions]

                if not tagged_users:
                    await select_interaction.followup.send("No users mentioned. Role assignment cancelled.", ephemeral=True)
                    return

                for user in tagged_users:
                    try:
                        await user.add_roles(selected_role)
                        await select_interaction.followup.send(f"Role '{selected_role.name}' assigned to {user.mention}.", ephemeral=True)
                    except discord.Forbidden:
                        await select_interaction.followup.send(f"Could not assign role to {user.mention} due to permission restrictions.", ephemeral=True)

            except asyncio.TimeoutError:
                await select_interaction.followup.send("You took too long to reply. Role assignment cancelled.", ephemeral=True)

        role_select.callback = select_role_callback

        view = View()
        view.add_item(role_select)
        await interaction.response.send_message("Please select a role to assign and then mention users.", view=view)

    @commands.command()
    async def help_command(self, interaction):
        help_message = f"**Assign Role Command**\n\n{metadata['help']}\n\n" \
                       "This command allows you to select a role from a dropdown and assign it to multiple users by mentioning them."
        await interaction.response.send_message(help_message)

async def setup(bot):
    await bot.add_cog(AssignRoleCog(bot))
Key Details:
The code must be structured as a cog (class that inherits from commands.Cog).
Interaction handling: Dropdown menus, button interactions, and command logic should be handled inside the cog.
Include a help command that sends detailed information about the command.
Properly structure the command logic and callback functions.
Error handling and user feedback (such as role assignment success or failure, timeout errors) must be implemented.